<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (C) 2011 Talend Inc. - www.talend.com
-->
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xsi:schemaLocation="
         http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
         http://cxf.apache.org/jaxrs
         http://cxf.apache.org/schemas/jaxrs.xsd">

     
     <import resource="common.xml" />
     
     <!-- Social Application -->
     
     <!-- Manages the registration of new users -->
     <bean id="userRegistrationService" class="oauth2.service.UserRegistrationService">
         <property name="accounts" ref="userAccounts"/>
     </bean>

     <!-- Lets registered users access and update their calendars --> 
     <bean id="socialService" class="oauth2.service.SocialService">
         <property name="accounts" ref="userAccounts"/>
     </bean>
     
     <!-- When Social.com user requests the Restaurant Registrations service to book a table,
          the latter will obtain a request token from OAuth RequestService and redirect the user
          to this service to get the token authorized in order to read this user's calendar.
          
          This service will return an authorization form to a user and then will redirect the user
          back to the Restaurant Registrations service to a callback address which was provided 
          during the client authorization code request 
     -->      
     <bean id="oauthAuthorizeService" 
           class="org.apache.cxf.rs.security.oauth2.services.AuthorizationCodeGrantService">
         <property name="dataProvider" ref="oauthProvider"/>
     </bean> 

     <!-- Security filter which enforces that only registered Social.com users
          can access their calendars with a public Social.com address.
     -->
     <bean id="socialSecurityContext" class="oauth2.service.SecurityContextFilter">
         <property name="accounts" ref="userAccounts"/>
     </bean>
     
     <!-- Social.com HTML View support. RequestDispatcherProvider is configured such that 
          it will redirect to the /forms/oauthAuthorize.jsp handler if it is asked to write OAuthAuthorizationData 
          which is what oauthAuthorizeService relies upon in order to return an authorization form
          to the user. OAuthAuthorizationData will be available as the HttpServletRequest "data" attribute.
          
          It will also redirect the UserRegistration bean to "/forms/registerUserConfirm.jsp" which is
          a response from UserRegistrationService. This bean will be available as the HttpServletRequest 
          "oauth.common.UserRegistration" attribute
     --> 
     <bean id="socialViews" class="org.apache.cxf.jaxrs.provider.RequestDispatcherProvider">
         <property name="classResources">
            <map>
              <entry key="org.apache.cxf.rs.security.oauth2.common.OAuthAuthorizationData" value="/forms/oauthAuthorize.jsp"/>
              <entry key="oauth2.common.UserRegistration" value="/forms/registerUserConfirm.jsp"/>
              <entry key="oauth2.service.UserAccount" value="/forms/userAccount.jsp"/>
            </map>
         </property>
         <property name="beanNames">
            <map>
              <entry key="org.apache.cxf.rs.security.oauth2.common.OAuthAuthorizationData" value="data"/>
              <entry key="oauth2.service.UserAccount" value="account"/>
            </map>
         </property>
         <property name="logRedirects" value="true"/>
     </bean>
     
     <!-- 
         Social.com service endpoint which consists of 2 JAX-RS root resources
     -->
     <jaxrs:server id="socialServer" address="/social">
        <jaxrs:serviceBeans>
           <ref bean="socialService"/>
           <ref bean="oauthAuthorizeService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
           <ref bean="socialSecurityContext"/>
           <ref bean="socialViews"/>
        </jaxrs:providers>
     </jaxrs:server>
     
     <jaxrs:server id="registerUsers" address="/register">
        <jaxrs:serviceBeans>
           <ref bean="userRegistrationService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
           <ref bean="socialViews"/>
        </jaxrs:providers>
     </jaxrs:server>

          
</beans>

